<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 方式一：无参构造 -->
    <!-- <bean id="userService" class="cn.adoredu.ioc.UserService"></bean> -->

    <!-- 方式二：使用静态工厂创建 -->
    <!-- <bean id="userService" class="cn.adoredu.ioc.BeanFactory" factory-method="getUserService"></bean> -->

    <!-- 方式三：使用实例工厂创建 -->
<!--    <bean id="beanFactory" class="cn.adoredu.ioc.BeanFactory2"></bean>-->
<!--    <bean name="userService" factory-bean="beanFactory" factory-method="getUserService" scope="prototype"></bean>-->

    <!-- 使用有参构造注入属性 -->
<!--    <bean id="user" class="cn.adoredu.ioc.bean.User">-->
<!--        <constructor-arg name="name" value="Tom"></constructor-arg>-->
<!--    </bean>-->

    <!-- 使用set方法注入属性 -->
<!--    <bean id="user" class="cn.adoredu.ioc.bean.User">-->
<!--        <property name="name" value="Jerry"></property>-->
<!--    </bean>-->

    <!-- 使用set方式注入对象类型 -->
<!--    <bean id="userDao" class="cn.adoredu.ioc.UserDao"></bean>-->
<!--    <bean id="userService" class="cn.adoredu.ioc.UserService">-->
<!--        <property name="userDao" ref="userDao"></property>-->
<!--    </bean>-->

    <!-- 注入复杂类型 -->
<!--    <bean id="userService" class="cn.adoredu.ioc.UserService">-->
<!--        <property name="arrs">-->
<!--            <list>-->
<!--                <value>java</value>-->
<!--                <value>python</value>-->
<!--            </list>-->
<!--        </property>-->

<!--        <property name="list">-->
<!--            <list>-->
<!--                <value>vue</value>-->
<!--                <value>react</value>-->
<!--            </list>-->
<!--        </property>-->

<!--        <property name="map">-->
<!--            <map>-->
<!--                <entry key="a" value="aa"></entry>-->
<!--                <entry key="b" value="bb"></entry>-->
<!--            </map>-->
<!--        </property>-->

<!--        <property name="properties">-->
<!--            <props>-->
<!--                <prop key="c">cc</prop>-->
<!--                <prop key="d">dd</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--    </bean>-->

    <!-- 开启注解扫描
        会扫描类、属性、方法上的注解
    -->
<!--    <context:component-scan base-package="cn.adoredu.anno"></context:component-scan>-->

    <!-- 只会扫描属性上注解 -->
    <!-- <context:annotation-config></context:annotation-config>-->

    <!-- 1. 配置对象 -->
<!--    <bean id="book" class="cn.adoredu.aop.Book"></bean>-->
<!--    <bean id="bookAdvice" class="cn.adoredu.aop.BookAdvice"></bean>-->

    <!-- 2. 配置aop操作 -->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 2.1 配置切入点 &ndash;&gt;-->
<!--        <aop:pointcut id="pointCut" expression="execution(* cn.adoredu.aop.Book.*(..))"/>-->

<!--        &lt;!&ndash; 2.2 配置切面 &ndash;&gt;-->
<!--        <aop:aspect ref="bookAdvice">-->
<!--            &lt;!&ndash; 配置增强类型 &ndash;&gt;-->
<!--            <aop:before method="before" pointcut-ref="pointCut" />-->

<!--            <aop:after-returning method="after" pointcut-ref="pointCut" />-->

<!--            <aop:around method="around" pointcut-ref="pointCut" />-->

<!--        </aop:aspect>-->

<!--    </aop:config>-->

    <!-- 开启aop操作 -->
<!--    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->

    <!-- 配置c3p0连接池 -->
    <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql:///spring-test"></property>
        <property name="user" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="datasource"></property>
    </bean>

    <bean id="orderService" class="cn.adoredu.tx.OrderService">
        <property name="orderDao" ref="orderDao"></property>
    </bean>

    <bean id="orderDao" class="cn.adoredu.tx.OrderDao">
        <property name="jdbcTemplate" ref="jdbcTemplate"></property>
    </bean>

    <!-- 1. 配置事物管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"></property>
    </bean>

    <!-- 2. 开启事物注解 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

<!--    &lt;!&ndash; 2. 配置事物增强 &ndash;&gt;-->
<!--    &lt;!&ndash; 指定事物管理器 &ndash;&gt;-->
<!--    <tx:advice id="transactionInterceptor" transaction-manager="transactionManager">-->
<!--        &lt;!&ndash; 事物操作 &ndash;&gt;-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash; 设置事物操作的方法匹配规则 &ndash;&gt;-->
<!--            <tx:method name="account*" />-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

<!--    &lt;!&ndash; 3. 配置切入点和切面 &ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 切入点 &ndash;&gt;-->
<!--        <aop:pointcut id="pointcut" expression="execution(* cn.adoredu.tx.OrderService.*(..))"/>-->

<!--        &lt;!&ndash; 切面 &ndash;&gt;-->
<!--        <aop:advisor advice-ref="transactionInterceptor" pointcut-ref="pointcut" />-->
<!--    </aop:config>-->

</beans>